// Code generated by MockGen. DO NOT EDIT.
// Source: internal/telegram/storage.go

// Package mock_telegram is a generated GoMock package.
package mock_telegram

import (
	context "context"
	reflect "reflect"
	telegram "subscription-bot/internal/telegram"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorage) Create(ctx context.Context, user telegram.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), ctx, user)
}

// FindOneByID mocks base method.
func (m *MockStorage) FindOneByID(ctx context.Context, chatId int64) (telegram.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", ctx, chatId)
	ret0, _ := ret[0].(telegram.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockStorageMockRecorder) FindOneByID(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockStorage)(nil).FindOneByID), ctx, chatId)
}

// FindOneByTime mocks base method.
func (m *MockStorage) FindOneByTime(ctx context.Context, time telegram.Time) (telegram.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByTime", ctx, time)
	ret0, _ := ret[0].(telegram.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByTime indicates an expected call of FindOneByTime.
func (mr *MockStorageMockRecorder) FindOneByTime(ctx, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByTime", reflect.TypeOf((*MockStorage)(nil).FindOneByTime), ctx, time)
}

// Update mocks base method.
func (m *MockStorage) Update(ctx context.Context, user telegram.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, user)
}
